/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frontera;

import DAO.HistoricoDatosDAO;
import DAO.TipoSensorDAO;
import Entidad.HistoricoDatos;
import Entidad.Sensor;
import Entidad.TipoSensor;
import java.awt.Component;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.List;
import java.util.Random;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class FramePrincipal extends javax.swing.JFrame {

    private final TipoSensor tipo = new TipoSensor("Microfono", 0, 1, false, 1, "MIC", 1);
    private final Sensor sensor = new Sensor("Habitación", tipo, 1);
    private final HistoricoDatosDAO historicoDatosDAO = new HistoricoDatosDAO();

    private PanelTablaDatos tabla = new PanelTablaDatos();
    private PanelPuntoParcial panelParcial = new PanelPuntoParcial();

    private EntityManagerFactory emf = Persistence.createEntityManagerFactory("Parcial2PU");

    /**
     * Creates new form MainFrame
     */
    public FramePrincipal() {
        initComponents();
        setLocationRelativeTo(null);
    }

    private void cambiarATabla() {
        for (Component c : jpContenido.getComponents()) {
            c.setVisible(false);
        }
        jpContenido.removeAll();

        jpContenido.add(tabla);
        tabla.setVisible(true);
        jpContenido.updateUI();
        jpContenido.repaint();
    }

    private void cambiarAPanelParcial() {
        for (Component c : jpContenido.getComponents()) {
            c.setVisible(false);
        }
        jpContenido.removeAll();

        jpContenido.add(panelParcial);
        panelParcial.setVisible(true);
        jpContenido.updateUI();
        jpContenido.repaint();
    }

    private void cambiarAEnviar() {
        for (Component c : jpContenido.getComponents()) {
            c.setVisible(false);
        }
        jpContenido.removeAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBotones = new javax.swing.JPanel();
        btnEnviarDato = new javax.swing.JButton();
        btnMostrarDatos = new javax.swing.JButton();
        btnPuntoParcial = new javax.swing.JButton();
        jpContenido = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelBotones.setBackground(new java.awt.Color(255, 255, 255));

        btnEnviarDato.setText("Enviar dato");
        btnEnviarDato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarDatoActionPerformed(evt);
            }
        });

        btnMostrarDatos.setText("Mostrar datos");
        btnMostrarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarDatosActionPerformed(evt);
            }
        });

        btnPuntoParcial.setText("Procesar datos");
        btnPuntoParcial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPuntoParcialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotonesLayout = new javax.swing.GroupLayout(panelBotones);
        panelBotones.setLayout(panelBotonesLayout);
        panelBotonesLayout.setHorizontalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(btnEnviarDato)
                .addGap(63, 63, 63)
                .addComponent(btnMostrarDatos)
                .addGap(52, 52, 52)
                .addComponent(btnPuntoParcial)
                .addContainerGap(79, Short.MAX_VALUE))
        );
        panelBotonesLayout.setVerticalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBotonesLayout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEnviarDato)
                    .addComponent(btnMostrarDatos)
                    .addComponent(btnPuntoParcial))
                .addContainerGap())
        );

        jpContenido.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jpContenido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpContenido, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnviarDatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarDatoActionPerformed
        cambiarAEnviar();

        Calendar calendar = Calendar.getInstance();
        int anio = calendar.get(Calendar.YEAR);
        int mes = calendar.get(Calendar.MONTH);
        int dia = calendar.get(Calendar.DAY_OF_MONTH);
        int hora = calendar.get(Calendar.HOUR_OF_DAY);
        int minuto = calendar.get(Calendar.MINUTE);
        String minutoStr = Integer.toString(minuto);
        if (minuto < 10) {
            minutoStr = "0" + minuto;
        }
        String fecha = Integer.toString(anio) + "/"
                + Integer.toString(mes) + "/"
                + Integer.toString(dia);
        String horaCompleta = Integer.toString(hora) + ":"
                + minutoStr;

        Random random = new Random();
        int valorTomado = random.nextInt(2);

        HistoricoDatos historicoDatos = new HistoricoDatos(0, sensor, valorTomado,
                fecha, horaCompleta, "Normal");

        historicoDatosDAO.crear(historicoDatos);
        JOptionPane.showMessageDialog(this, "Dato enviado", "", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_btnEnviarDatoActionPerformed

    private void btnMostrarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarDatosActionPerformed
        Calendar calendar = Calendar.getInstance();
        int anio = calendar.get(Calendar.YEAR);
        int mes = calendar.get(Calendar.MONTH);
        int dia = calendar.get(Calendar.DAY_OF_MONTH);
        int hora = calendar.get(Calendar.HOUR_OF_DAY);
        int minuto = calendar.get(Calendar.MINUTE);
        int segundo = calendar.get(Calendar.SECOND);
        String fecha = Integer.toString(anio) + "/"
                + Integer.toString(mes) + "/"
                + Integer.toString(dia);
        tabla.getJlFecha().setText(fecha);
        tabla.llenarTabla();

        cambiarATabla();

    }//GEN-LAST:event_btnMostrarDatosActionPerformed

    private void btnPuntoParcialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPuntoParcialActionPerformed
        // TODO add your handling code here:
        cambiarAPanelParcial();
        int opcion = JOptionPane.showConfirmDialog(this, "¿Desea calcular el promedio?", "", JOptionPane.YES_NO_OPTION);
        if (opcion == 0) {//CALCULAR PROMEDIO
            EntityManager em = emf.createEntityManager();

            em.getTransaction().begin();
            Query q1 = em.createQuery("UPDATE TipoSensor SET promedio = 1");
            q1.executeUpdate();
            em.getTransaction().commit();

            Query q2 = em.createQuery("SELECT h FROM HistoricoDatos h ORDER BY h.id DESC");
            List<HistoricoDatos> listaDatos = q2.getResultList();
            
            Query q3 = em.createQuery("SELECT t FROM TipoSensor t");
            List<TipoSensor> listaTipo = q3.getResultList();
            TipoSensor tipo = listaTipo.get(0);

            Calendar calendar = Calendar.getInstance();
            int horaActual = calendar.get(Calendar.HOUR_OF_DAY);
            int horaInicial = horaActual - tipo.getNumeroHoras();
            
            double promedio = 0;
            int cantidad = 0;
            for(HistoricoDatos h : listaDatos){
                String horaDato = h.getHora();
                int soloHora = Integer.parseInt(horaDato.substring(0,2));
                if(soloHora >= horaInicial && soloHora <= horaActual){
                    promedio += h.getValorTomado();
                    cantidad++;
                }
            }
            promedio = promedio/cantidad;
            if (promedio == 0.0) {
                JOptionPane.showMessageDialog(this, "Promedio: " + promedio + "\n ALERTA 1", "", JOptionPane.WARNING_MESSAGE);
            }else if(promedio > 0.0 && promedio < 1.0){
                JOptionPane.showMessageDialog(this, "Valor tomado: " + promedio + "\n ALERTA 2", "", JOptionPane.WARNING_MESSAGE);
            }else if (promedio == 1.0) {
                JOptionPane.showMessageDialog(this, "Valor tomado: " + promedio + "\n ALERTA 3", "", JOptionPane.WARNING_MESSAGE);
            }
          
        } else {//SIN PROMEDIO
            EntityManager em = emf.createEntityManager();

            em.getTransaction().begin();
            Query q1 = em.createQuery("UPDATE TipoSensor SET promedio = 0");
            q1.executeUpdate();
            em.getTransaction().commit();

            Query q2 = em.createQuery("SELECT h FROM HistoricoDatos h ORDER BY h.id DESC");
            List<HistoricoDatos> listaDatos = q2.getResultList();
            HistoricoDatos datos = listaDatos.get(0);
            double valor = datos.getValorTomado();
            if (valor == 0.0) {
                JOptionPane.showMessageDialog(this, "Valor tomado: " + valor + "\n ALERTA 1", "", JOptionPane.WARNING_MESSAGE);
            } else if (valor == 1.0) {
                JOptionPane.showMessageDialog(this, "Valor tomado: " + valor + "\n ALERTA 3", "", JOptionPane.WARNING_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnPuntoParcialActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FramePrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnviarDato;
    private javax.swing.JButton btnMostrarDatos;
    private javax.swing.JButton btnPuntoParcial;
    private javax.swing.JPanel jpContenido;
    private javax.swing.JPanel panelBotones;
    // End of variables declaration//GEN-END:variables
}
